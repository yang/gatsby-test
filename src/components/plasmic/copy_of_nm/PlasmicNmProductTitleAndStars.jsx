// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: tnM4fJ4V3QSWAt6aqkZcfw
// Component: hs4EtlOe_iskB
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import projectcss from "./plasmic_copy_of_nm.module.css"; // plasmic-import: tnM4fJ4V3QSWAt6aqkZcfw/projectcss
import sty from "./PlasmicNmProductTitleAndStars.module.css"; // plasmic-import: hs4EtlOe_iskB/css
import Star24PxsvgIcon from "./icons/PlasmicIcon__Star24Pxsvg"; // plasmic-import: 6d3gmgPb3EiUf/icon

export const PlasmicNmProductTitleAndStars__VariantProps = new Array();

export const PlasmicNmProductTitleAndStars__ArgProps = new Array();

function PlasmicNmProductTitleAndStars__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <p.Stack
        as={"div"}
        data-plasmic-name={"columns"}
        data-plasmic-override={overrides.columns}
        hasGap={true}
        className={classNames(defaultcss.all, sty.columns)}
      >
        <div
          data-plasmic-name={"column"}
          data-plasmic-override={overrides.column}
          className={classNames(defaultcss.all, sty.column)}
        >
          <div className={classNames(defaultcss.all, sty.box__erNd7)}>
            <h1
              data-plasmic-name={"h1"}
              data-plasmic-override={overrides.h1}
              className={classNames(
                defaultcss.h1,
                defaultcss.__wab_text,
                sty.h1
              )}
            >
              {"Product Name"}
            </h1>

            <div className={classNames(defaultcss.all, sty.box__jKSm)}>
              <div className={classNames(defaultcss.all, sty.box__rMMr2)}>
                <Star24PxsvgIcon
                  className={classNames(defaultcss.all, sty.svg___1LhT)}
                  role={"img"}
                />

                <Star24PxsvgIcon
                  className={classNames(defaultcss.all, sty.svg__jKk0W)}
                  role={"img"}
                />

                <Star24PxsvgIcon
                  className={classNames(defaultcss.all, sty.svg__torLe)}
                  role={"img"}
                />

                <Star24PxsvgIcon
                  className={classNames(defaultcss.all, sty.svg__upOcY)}
                  role={"img"}
                />

                <Star24PxsvgIcon
                  className={classNames(defaultcss.all, sty.svg___5Dwkg)}
                  role={"img"}
                />
              </div>

              <div
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.box__xQIeL
                )}
              >
                {"8 Reviews"}
              </div>
            </div>
          </div>
        </div>
      </p.Stack>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "columns", "column", "h1"],
  columns: ["columns", "column", "h1"],
  column: ["column", "h1"],
  h1: ["h1"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicNmProductTitleAndStars__ArgProps,
      internalVariantPropNames: PlasmicNmProductTitleAndStars__VariantProps
    });

    return PlasmicNmProductTitleAndStars__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNmProductTitleAndStars";
  } else {
    func.displayName = `PlasmicNmProductTitleAndStars.${nodeName}`;
  }
  return func;
}

export const PlasmicNmProductTitleAndStars = Object.assign(
  // Top-level PlasmicNmProductTitleAndStars renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    columns: makeNodeComponent("columns"),
    column: makeNodeComponent("column"),
    h1: makeNodeComponent("h1"),
    // Metadata about props expected for PlasmicNmProductTitleAndStars
    internalVariantProps: PlasmicNmProductTitleAndStars__VariantProps,
    internalArgProps: PlasmicNmProductTitleAndStars__ArgProps
  }
);

export default PlasmicNmProductTitleAndStars;
/* prettier-ignore-end */
