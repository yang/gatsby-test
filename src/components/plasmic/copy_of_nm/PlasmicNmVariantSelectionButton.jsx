// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: tnM4fJ4V3QSWAt6aqkZcfw
// Component: -1PcR9_co3L6d
import * as React from "react";
import * as p from "@plasmicapp/react-web";
import {
  hasVariant,
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants
} from "@plasmicapp/react-web";
import { ScreenContext } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: XcZHgqDcMWd79/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import projectcss from "./plasmic_copy_of_nm.module.css"; // plasmic-import: tnM4fJ4V3QSWAt6aqkZcfw/projectcss
import sty from "./PlasmicNmVariantSelectionButton.module.css"; // plasmic-import: -1PcR9_co3L6d/css
import ArrowForward24PxsvgIcon from "./icons/PlasmicIcon__ArrowForward24Pxsvg"; // plasmic-import: LPNdthy-FpIyO/icon

export const PlasmicNmVariantSelectionButton__VariantProps = new Array();

export const PlasmicNmVariantSelectionButton__ArgProps = new Array();

function PlasmicNmVariantSelectionButton__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  const globalVariants = ensureGlobalVariants({
    screen: React.useContext(ScreenContext)
  });

  return (
    hasVariant(globalVariants, "screen", "desktop")
      ? false
      : hasVariant(globalVariants, "screen", "laptop")
      ? false
      : true
  ) ? (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <div
        data-plasmic-name={"columns"}
        data-plasmic-override={overrides.columns}
        className={classNames(defaultcss.all, sty.columns)}
      >
        <div
          data-plasmic-name={"column"}
          data-plasmic-override={overrides.column}
          className={classNames(defaultcss.all, sty.column)}
        >
          <button
            data-plasmic-name={"button"}
            data-plasmic-override={overrides.button}
            className={classNames(defaultcss.button, sty.button)}
          >
            <p.Stack
              as={"div"}
              hasGap={true}
              className={classNames(defaultcss.all, sty.box__iWbr9)}
            >
              <div
                className={classNames(
                  defaultcss.all,
                  defaultcss.__wab_text,
                  sty.box__eDyWu
                )}
              >
                {"Select"}
              </div>

              <ArrowForward24PxsvgIcon
                data-plasmic-name={"svg"}
                data-plasmic-override={overrides.svg}
                className={classNames(defaultcss.all, sty.svg)}
                role={"img"}
              />
            </p.Stack>
          </button>
        </div>
      </div>
    </div>
  ) : null;
}

const PlasmicDescendants = {
  root: ["root", "columns", "column", "button", "svg"],
  columns: ["columns", "column", "button", "svg"],
  column: ["column", "button", "svg"],
  button: ["button", "svg"],
  svg: ["svg"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicNmVariantSelectionButton__ArgProps,
      internalVariantPropNames: PlasmicNmVariantSelectionButton__VariantProps
    });

    return PlasmicNmVariantSelectionButton__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNmVariantSelectionButton";
  } else {
    func.displayName = `PlasmicNmVariantSelectionButton.${nodeName}`;
  }
  return func;
}

export const PlasmicNmVariantSelectionButton = Object.assign(
  // Top-level PlasmicNmVariantSelectionButton renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    columns: makeNodeComponent("columns"),
    column: makeNodeComponent("column"),
    button: makeNodeComponent("button"),
    svg: makeNodeComponent("svg"),
    // Metadata about props expected for PlasmicNmVariantSelectionButton
    internalVariantProps: PlasmicNmVariantSelectionButton__VariantProps,
    internalArgProps: PlasmicNmVariantSelectionButton__ArgProps
  }
);

export default PlasmicNmVariantSelectionButton;
/* prettier-ignore-end */
