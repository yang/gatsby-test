// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: tnM4fJ4V3QSWAt6aqkZcfw
// Component: q-7jyH5zxIpxa
import * as React from "react";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import "@plasmicapp/react-web/lib/plasmic.css";
import defaultcss from "../plasmic__default_style.module.css"; // plasmic-import: global/defaultcss
import projectcss from "./plasmic_copy_of_nm.module.css"; // plasmic-import: tnM4fJ4V3QSWAt6aqkZcfw/projectcss
import sty from "./PlasmicNmProductDescription.module.css"; // plasmic-import: q-7jyH5zxIpxa/css

export const PlasmicNmProductDescription__VariantProps = new Array();

export const PlasmicNmProductDescription__ArgProps = new Array();

function PlasmicNmProductDescription__RenderFunc(props) {
  const { variants, args, overrides, forNode } = props;
  return (
    <div
      data-plasmic-name={"root"}
      data-plasmic-override={overrides.root}
      data-plasmic-root={true}
      data-plasmic-for-node={forNode}
      className={classNames(defaultcss.all, projectcss.root_reset, sty.root)}
    >
      <div
        data-plasmic-name={"columns"}
        data-plasmic-override={overrides.columns}
        className={classNames(defaultcss.all, sty.columns)}
      >
        <div
          data-plasmic-name={"column"}
          data-plasmic-override={overrides.column}
          className={classNames(defaultcss.all, sty.column)}
        >
          <div
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.box__z7FWr
            )}
          >
            {"Something about product heading"}
          </div>

          <div
            className={classNames(
              defaultcss.all,
              defaultcss.__wab_text,
              sty.box__b4GU9
            )}
          >
            {"Something about product text"}
          </div>
        </div>
      </div>
    </div>
  );
}

const PlasmicDescendants = {
  root: ["root", "columns", "column"],
  columns: ["columns", "column"],
  column: ["column"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = deriveRenderOpts(props, {
      name: nodeName,
      descendantNames: [...PlasmicDescendants[nodeName]],
      internalArgPropNames: PlasmicNmProductDescription__ArgProps,
      internalVariantPropNames: PlasmicNmProductDescription__VariantProps
    });

    return PlasmicNmProductDescription__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicNmProductDescription";
  } else {
    func.displayName = `PlasmicNmProductDescription.${nodeName}`;
  }
  return func;
}

export const PlasmicNmProductDescription = Object.assign(
  // Top-level PlasmicNmProductDescription renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    columns: makeNodeComponent("columns"),
    column: makeNodeComponent("column"),
    // Metadata about props expected for PlasmicNmProductDescription
    internalVariantProps: PlasmicNmProductDescription__VariantProps,
    internalArgProps: PlasmicNmProductDescription__ArgProps
  }
);

export default PlasmicNmProductDescription;
/* prettier-ignore-end */
